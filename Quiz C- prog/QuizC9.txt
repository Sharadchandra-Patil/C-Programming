1. 
What will be the output?
#include<stdio.h>
union test
{
short int num;
char ch[2];
};
int main()
{
    union test ut;          // solution::  0 0 0 0 0 0 0 1    0 1 0 0 0 1 0 1     <--ut.num=512
    ut.num = 325;           //                     ch[1]=1           ch[0]=69     char(512)=256+69=char(69)
    char *ch = ut.ch ;      //                                                                    = E
    printf("%d \t %c\n", ch[0],(char)ut.num);
    return 0;
}
Answers
1. 32  5
2. 69  5
3. 69  E  <--Ans
4. 516 E


2. 
What will be the Output?
#include <stdio.h>
int main()
{
	struct
    {
        struct
        {
            int m;
            char *s;             //  <--- s holds address of string not actual string
        }marks;
        char *name;
    }s[3] = {{65,"","Tom"},{75,"","Jerry"},{55,"","Alsa"}};

    printf("Specify Subject name");

    scanf("%s",s[0].marks.s);	// Here we are assigning atual string instead of passing address of string
                                // Correct approach is read string in char array and assign 
                                // s[0].marks.s = &char array;

    printf("%d %s %s",s[0].marks.m,s[0].marks.s,s[0].name);

}
Answers
1. 65 English Tom
2. 65  Tom
3. Compile Time Error
4. Runtime Error       <--Ans


3. 
What is the output of this C code?
#include <stdio.h>
struct p
{
 int k;
 char c;
 float f;
};
int main()
{
 struct p x = {.c = 166, .f = 3, .k = 1};
 printf("%f\n", x.f);     *****
}                **
Answers
1. 3.000000           <--Ans
2. Compile time error
3. Undefined behavior
4. 1.000000


4. 
What will be the Output?
#include <stdio.h>
struct point
{
	int x;
	int y;
};
void print(struct point*);
int main()
{
	struct point p1[] = {1, 2, 3, 4};
	print(p1);
}
void print(struct point p[])
	printf("%d %d %d %d\n", p->x,  ++p->x    ,p->y  ,  ++p->y);
}                           //         ++(p->x)            ++(p->y)
                            // x=2 <-- x=1+1=2    y=3  <-- y=2+1=3   <----calling convention R-->L
Answers
1. 2 2 3 3  //  <---Ans
2. 1 2 2 3
3. CompileTime Error
4. Runtime Error


5. 
What will be the output?
#include<stdio.h>
union
{
	int i;
	char c;
	char arr[4];
}u;

int main(void)
{                                       // 0000 0000 0000 0000 0000 0000 0000 0000 <--Max size for union of int
	u.c = 'D';                      // D ASCII = 68                  0100 0100                 
	u.i = 0x0041;                   // i = 65                        0100 0001
	u.arr[1] = u.arr[2] = 'E';      // <------   0100 0101 0100 0101 0100 0001 <--Final status in memory
	printf("%d %c",sizeof(u),u.c);  //                               ---------
                 //        4      A     //                               u.c (first byte memory)
                                        //                               =65 =A (ASCII Value of A)
	return 0;
}

Answers
1. 4 A  // <--Ans
2. 2 D
3. 3 A
4. 3 D


6. 
What will be the Output?
#include<stdio.h>

int main()
{
    typedef struct      // Structure is local to main , can't be accessed globaly in fun() function
    {
        int id;
        float price;
    }DEMO;
    DEMO d[3]={11,56.00,22,45.00,33,78.00};
    fun(d+1);
}
void fun(DEMO *d)
{
    printf("%d %.2f",d->id,d->price)
}

Answers
1. 22 45.00
2. 11 56.00
3. Compile Time Error      //<---Ans
4. printf should be replaced with d[0].id,d[0].price


7. 
#include <stdio.h>
int main()
{
    union values
    {
        unsigned char a;
        unsigned char b;
        unsigned int  c;
    };
    
    union values val;
    *****
    val.a=0;
    val.b=0;
    val.c=1;           // As union datatype common memory to all therefore 1 will be witten in memory finally
 
    printf("%d,%d,%d",val.a,val.b,val.c);
    return 0;
}

Answers
1. 0,0,1
2. Error
3. 1,1,1  //<--Ans
4. 1,0,0


8. 
What will be the output of following program ?
#include <stdio.h>
struct sample
{
    int a=1;         // Struct member can't be initialised at the time of declaration
    char b='S';
    float c=11.5;
};
int main()
{
    struct sample s;
    printf("%d,%c,%f",s.a,s.b,s.c);
    return 0;
}

Answers
1. Error //<--Ans
2. 1,S,11.5
3. 1,S,11.500000
4. No Error , No Output


9. 
What will be the output?
#include <stdio.h>
struct test
{
	int capacity;
	char *course;
}st[] = { 220, "DAC Pune", 120, "KDAC Karad ", 30, "DBDA", 60, "DESD", 120,	"DMC" };

int main(void)
{
	struct test *p = st;         //points to first object --> 220 DAC PUNE
	p += 1;                      //Points to second object--> 120 KDAC Karad
	++p->course;                 //++(p->course) = ++(starting address of KDAC Karad) = pointing-> DAC Karad
	printf(" %s,", p++->course); // First print=(p->course)= DAC Karad then  p++(pointing to third object)
	printf(" %c,", *++p->course);//*(++(starting address of third object)=*(BDA)-->AS %c prints B 
	printf(" %d,", p[0].capacity);//prints capacity of current pointig = 30
	printf(" %s \n", p->course);  // prints BDA

	return 0;
}

Answers
1. KDAC Karad , D, 30, DBDA
2. DAC Karad , B, 30, BDA  // <--Ans
3. DAC Pune , K, 120, DAC
4. KDAC , K , 120, DAC KARAD


10. 
What will be the output of program?
#include<stdio.h>
int main(void)
{
	struct s
	{
		char *p;
		int i;
		struct s1
		{
			char a[4];
			char *p;
		}o1;
		struct s *sp;
	}a[] = {"E-DAC",5,"JAVA","PUNE",a+1,
            "E-DMC",6,"CPP","PUNE",a+2,
            "E-DESD",8,"EOS","KARAD",a},*p;
	p = a[2].sp;
	printf("%s %d %s %s \n",(p+1)->p,(*p).i,a[1].sp->p,(&2[a])->sp->p);
                              // E-DMC     5     E-DECD      E-DAC
                              // p+1--> Never changes pointig address of p unlike p++ (which changes)
	return 0;
}

Answers
1. E-DMC 5 E-DESD E-DAC //<--Ans
2. E-DMC 6 JAVA   E-DMC
3. E-DESD 8 KARAD E-DESD
4. E-DESD 8 EOS   E-DESD